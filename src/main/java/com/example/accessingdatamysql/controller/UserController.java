package com.example.accessingdatamysql;
import com.example.accessingdatamysql.entity.*;
import com.example.accessingdatamysql.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class UserController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email,@RequestParam String password) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		n.setPassword(password);
		userRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	@DeleteMapping(path="/delete")
	public @ResponseBody String deleteAllUsers(){
		userRepository.deleteAll();
		return "Deleted All Users";
	}
	@PutMapping(path="/update/name")
	public @ResponseBody String updateUsername(String name1,Integer pk1){
		user = userRepository.findByID(pk1);
		original_name = user.name;
		user.setName(name1);
		userRepository.save(user);
		xyz = "The name " + original_name + " has been changed to" + name1;
		return xyz;
	} 
	@PutMapping(path="/update/email")
	public @ResponseBody String updateEmail(String name1,Integer pk1){
		user = userRepository.findByID(pk1);
		original_email = user.email;
		user.setName(name1);
		userRepository.save(user);
		String xyz = "The email " + original_email + " has been changed to" + name1;
		return xyz;
	}
	@PutMapping(path="/update/password")
	public @ResponseBody String updatePassword(String password1, Integer pk1){
		user = userRepository.findById(pk1);
		user.setPassword(password1);
		userRepository.save(user);
		return "Password has been changed";
	}
	@PutMapping(path="/update/add_song_to_library")
	public @ResponseBody String add_song_library(Song song1, Integer pk1){
		user = userRepository.findById(pk1);
		user.library.add(song1);
		userRepository.save(user);
		String xyz = "Song" + song1.getSongName() + "has been added to library";
		return xyz;
	} 
	@PutMapping(path="/update/remove_song_to_library")
	public @ResponseBody String remove_song_library(Song song1, Integer pk1){
		user = userRepository.findById(pk1);
		if(user.library.remove(song1)){
			String xyz = "Song" + song1.getSongName() + "has been removed from library";
			userRepository.save(user);
			return xyz;
		}else{
			String xyz = "Cannot find song name" + song1.getSongName() + "in playlist";
			return xyz;
		}
	}
	
}
